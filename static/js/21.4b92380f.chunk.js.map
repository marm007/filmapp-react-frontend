{"version":3,"sources":["components/pages/home/reducer.js","components/pages/home/index.js"],"names":["initialState","films","isLoading","isAllFetched","isInitialLoaded","error","homePageReducer","state","action","type","fieldName","payload","Set","length","pageInitialMaxFetchCount","pageMaxFetchCount","Home","history","useHistory","useReducer","dispatch","handleOnHomePageData","useCallback","useBottomScrollListener","triggerOnNoScroll","useEffect","a","filmApi","limit","then","res","response","data","forEach","film","img","process","id","catch","err","console","fetchData","skip","getAllFilms","handleRedirect","push","pathname","className","map","index","Array","_"],"mappings":"qNAEaA,EAAe,CACxBC,MAAO,KACPC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,MAAO,MAGEC,EAAkB,SAACC,EAAOC,GACnC,OAAQA,EAAOC,MACX,IAAK,QACD,OAAO,2BACAF,GADP,kBAEKC,EAAOE,UAAYF,EAAOG,UAGnC,IAAK,OACD,OAAO,2BACAJ,GADP,IAEIL,WAAW,EACXC,cAAc,EACdE,MAAO,KAGf,IAAK,eACD,OAAO,2BACAE,GADP,IAEIN,MAAM,YAAK,IAAIW,IAAJ,YAAYJ,EAAOG,WAC9BT,WAAW,EACXE,iBAAiB,EACjBD,aAAcK,EAAOG,QAAQE,OAASC,MAG9C,IAAK,UACD,OAAO,2BACAP,GADP,IAEIN,MAAM,YAAK,IAAIW,IAAJ,sBAAYL,EAAMN,OAAlB,YAA4BO,EAAOG,YAC9CT,WAAW,EACXC,aAAcK,EAAOG,QAAQE,OAASE,IACtCV,MAAO,OAGf,IAAK,QACD,OAAO,2BACAE,GADP,IAEIL,WAAW,EACXC,cAAc,EACdE,MAAOG,EAAOG,UAGtB,QACI,OAAOJ,I,2CC4CJS,UAlFf,WAEI,IAAIC,EAAUC,cAEd,EAA0BC,qBAAWb,EAAiBN,GAAtD,mBAAOO,EAAP,KAAca,EAAd,KACQnB,EAAoDM,EAApDN,MAAOC,EAA6CK,EAA7CL,UAAWC,EAAkCI,EAAlCJ,aAAcC,EAAoBG,EAApBH,gBAElCiB,EAAuBC,uBAAY,WAChCpB,GAAcC,IAAgBC,GAC/BgB,EAAS,CACLX,KAAM,WAGf,CAACP,EAAWC,EAAcC,IAE7BmB,YAAwBF,EAAsB,CAAEG,mBAAmB,IAEnEC,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEACUC,IAAY,CAAEC,MAAOd,MAA4Be,MAAK,SAAAC,GACxD,IAAIC,EAAWD,EAAIE,KAEnBD,EAASE,SAAQ,SAAAC,GACbA,EAAKC,IAAL,UAAcC,0DAAd,iBAAoDF,EAAKG,GAAzD,iBAIJjB,EAAS,CACLX,KAAM,eACNE,QAASoB,OAEdO,OAAM,SAAAC,GAAG,OAAIC,QAAQnC,MAAMkC,MAblC,4CADY,uBAAC,WAAD,wBAgBZE,KACD,IAEHhB,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEACUC,IAAY,CAAEe,KAAMzC,EAAMY,OAAQe,MAAOb,MAC1Cc,MAAK,SAAAC,GACF,IAAIC,EAAWD,EAAIE,KAEnBD,EAASE,SAAQ,SAAAC,GACbA,EAAKC,IAAL,UAAcC,0DAAd,iBAAoDF,EAAKG,GAAzD,iBAIJjB,EAAS,CACLX,KAAM,UACNE,QAASoB,OAEdO,OAAM,SAAAC,GAAG,OAAIC,QAAQnC,MAAMkC,MAdtC,4CADY,sBAiBRrC,GAAaE,GAAmBH,GAjBvB,WAAD,wBAiB+B0C,KAC5C,CAACzC,EAAWE,EAAiBH,IAEhC,IAAM2C,EAAiB,SAACP,GACpBpB,EAAQ4B,KAAK,CAAEC,SAAU,UAAGV,2BAAH,SAA4CC,KAGzE,OACI,sBAAKU,UAAU,gBAAf,UAEQ9C,EAAQA,EAAM+C,KAAI,SAACd,EAAMe,GAAP,OAAiB,cAAC,IAAD,CAAoBf,KAAMA,EAAMe,MAAOA,EAAOL,eAAgBA,GAAnDV,EAAKG,OAC5C,YAAIa,MAAM,KAAKF,KAAI,SAACG,EAAGF,GAAJ,OAClB,cAAC,IAAD,GAAeA,OAKtB9C,GAAgB,qBAAK4C,UAAU,6CAAf,SAER7C,GACD,qBAAK6C,UAAU","file":"static/js/21.4b92380f.chunk.js","sourcesContent":["import { pageInitialMaxFetchCount, pageMaxFetchCount } from \"../../../config\"\n\nexport const initialState = {\n    films: null,\n    isLoading: false,\n    isAllFetched: false,\n    isInitialLoaded: false,\n    error: null,\n}\n\nexport const homePageReducer = (state, action) => {\n    switch (action.type) {\n        case 'field': {\n            return {\n                ...state,\n                [action.fieldName]: action.payload\n            }\n        }\n        case 'load': {\n            return {\n                ...state,\n                isLoading: true,\n                isAllFetched: false,\n                error: ''\n            }\n        }\n        case 'initial-load': { \n            return {\n                ...state,\n                films: [...new Set([...action.payload])],\n                isLoading: false,\n                isInitialLoaded: true,\n                isAllFetched: action.payload.length < pageInitialMaxFetchCount,\n            }\n        }\n        case 'success': {\n            return {\n                ...state,\n                films: [...new Set([...state.films, ...action.payload])],\n                isLoading: false,\n                isAllFetched: action.payload.length < pageMaxFetchCount,\n                error: null\n            }\n        }\n        case 'error': {\n            return {\n                ...state,\n                isLoading: false,\n                isAllFetched: false,\n                error: action.payload\n            }\n        }\n        default:\n            return state\n    }\n}","import React, { useEffect, useReducer, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { homePageReducer, initialState } from './reducer';\n\nimport Film from '../../helpers/film'\nimport Skeleton from '../../helpers/film/skeleton';\n\nimport * as filmApi from '../../../services/filmService'\n\nimport { pageMaxFetchCount, pageInitialMaxFetchCount } from '../../../config';\n\nimport useBottomScrollListener from '../../../helpers/hooks/useBottomScrollListener';\n\n\nfunction Home() {\n\n    let history = useHistory()\n\n    const [state, dispatch] = useReducer(homePageReducer, initialState)\n    const { films, isLoading, isAllFetched, isInitialLoaded } = state\n\n    const handleOnHomePageData = useCallback(() => {\n        if (!isLoading && !isAllFetched && isInitialLoaded) {\n            dispatch({\n                type: 'load'\n            })\n        }\n    }, [isLoading, isAllFetched, isInitialLoaded])\n\n    useBottomScrollListener(handleOnHomePageData, { triggerOnNoScroll: true })\n\n    useEffect(() => {\n        async function fetchData() {\n            await filmApi.all({ limit: pageInitialMaxFetchCount }).then(res => {\n                let response = res.data;\n\n                response.forEach(film => {\n                    film.img = `${process.env.REACT_APP_API_URL}films/${film.id}/thumbnail`\n\n                });\n\n                dispatch({\n                    type: 'initial-load',\n                    payload: response\n                })\n            }).catch(err => console.error(err))\n        }\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        async function getAllFilms() {\n            await filmApi.all({ skip: films.length, limit: pageMaxFetchCount })\n                .then(res => {\n                    let response = res.data;\n\n                    response.forEach(film => {\n                        film.img = `${process.env.REACT_APP_API_URL}films/${film.id}/thumbnail`\n\n                    });\n\n                    dispatch({\n                        type: 'success',\n                        payload: response\n                    })\n                }).catch(err => console.error(err))\n        }\n        if (isLoading && isInitialLoaded && films) getAllFilms()\n    }, [isLoading, isInitialLoaded, films])\n\n    const handleRedirect = (id) => {\n        history.push({ pathname: `${process.env.REACT_APP_PATH_NAME}film/` + id });\n    };\n\n    return (\n        <div className=\"row mt-5 mx-2\">\n            {\n                films ? films.map((film, index) => <Film key={film.id} film={film} index={index} handleRedirect={handleRedirect} />)\n                    : ([...Array(20)].map((_, index) => (\n                        <Skeleton key={index} />\n                    )))\n            }\n\n            {\n                !isAllFetched && <div className=\"fetch-loader d-flex justify-content-center\">\n                    {\n                        (isLoading) &&\n                        <div className=\"spinner-border\" />\n                    }\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default Home;\n"],"sourceRoot":""}