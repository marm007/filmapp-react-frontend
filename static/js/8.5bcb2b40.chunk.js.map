{"version":3,"sources":["components/auth/register.js"],"names":["Register","props","history","useHistory","login","useContext","UserContext","useReducer","authReducer","authInitialState","state","dispatch","email","nick","password","isSubmitted","isSuccess","isSending","isError","error","useState","show","setShow","useEffect","a","authApi","name","then","res","type","setTimeout","data","user","id","token","refreshToken","goBack","catch","err","errorMessage","response","errors","payload","console","submitData","modalClose","onHide","size","centered","Header","closeButton","Title","Body","onSubmit","e","preventDefault","length","Group","Label","htmlFor","Control","isInvalid","value","onChange","fieldName","target","Feedback","className","maxLength","variant","animation","Footer","onClick"],"mappings":"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","file":"static/js/8.5bcb2b40.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Alert, Button, Form, Modal, Spinner } from 'react-bootstrap';\nimport * as authApi from '../../services/authService'\nimport { authInitialState, authReducer } from './reducer';\nimport UserContext from '../../helpers/contexts/user/userContext'\n\nfunction Register(props) {\n\n    let history = useHistory()\n\n    const { login } = useContext(UserContext)\n    const [state, dispatch] = useReducer(authReducer, authInitialState)\n    const { email, nick, password, isSubmitted, isSuccess, isSending, isError, error } = state\n\n    const [show, setShow] = useState(true)\n\n    useEffect(() => {\n        async function submitData() {\n\n            await authApi.register({ email: email, password: password, name: nick })\n                .then(res => {\n                    dispatch({\n                        type: 'success'\n                    })\n                    setTimeout(() => {\n                        login(res.data.user.name, res.data.user.id, res.data.token, res.data.refreshToken)\n                        history.goBack()\n                    }, 1500)\n                })\n                .catch(err => {\n                    let errorMessage = null;\n\n                    if (err.response && err.response.data && err.response.data.errors)\n                        errorMessage = err.response.data.errors;\n                    else if (err.response && err.response.data && err.response.data.error)\n                        errorMessage = err.response.data.error\n\n                    dispatch({\n                        type: 'error',\n                        payload: errorMessage\n                    })\n                    console.error(err)\n                })\n        }\n\n        if (isSending) submitData()\n\n    }, [isSending, email, nick, password, history, login])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n\n        dispatch({\n            type: 'submit'\n        })\n\n        if (email && nick && password && password.length >= 6) {\n            dispatch({\n                type: 'send'\n            })\n        }\n    }\n\n    const modalClose = () => {\n        setShow(false)\n        history.goBack();\n    };\n\n\n    return (\n\n        <Modal\n            onHide={modalClose}\n            show={show}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Register\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"nick\">Nick</Form.Label>\n                        <Form.Control isInvalid={isSubmitted && !nick} type=\"text\" name=\"nick\" value={nick}\n                            onChange={e => dispatch({ type: 'field', fieldName: 'nick', payload: e.target.value })} >\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Nick is required\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group className=\"mt-2\">\n                        <Form.Label htmlFor=\"email\">Email</Form.Label>\n                        <Form.Control\n                            isInvalid={(isSubmitted && !email)}\n                            type=\"email\" name=\"email\" value={email} onChange={e => dispatch({ type: 'field', fieldName: 'email', payload: e.target.value })} >\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Email is required\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <Form.Group className=\"mt-2\">\n                        <Form.Label htmlFor=\"password\">Password</Form.Label>\n                        <Form.Control isInvalid={isSubmitted && (password.length < 6)} type=\"password\"\n                            name=\"password\" value={password} maxLength=\"11\"\n                            onChange={e => dispatch({ type: 'field', fieldName: 'password', payload: e.target.value })}>\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {\n                                password.length === 0 ? \"Password is required\" : \"Password too short (min 6 chars)\"\n                            }\n\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    {\n                        isSuccess &&\n                        <Alert variant=\"success\" className=\"mt-2\">\n                            You have successfully registered and logged in.\n                        </Alert>\n                    }\n\n                    {\n                        isError &&\n                        <Alert variant=\"danger\" className=\"mt-2\">\n                            {error ? error : 'Error while registtering.'}\n                        </Alert>\n                    }\n\n                    <Form.Group className=\"d-flex align-items-center mt-2\">\n                        <Button type=\"submit\" className=\"btn-primary\">\n                            Register\n                        </Button>\n\n                        {\n                            isSending &&\n                            <Spinner className=\"ms-2\" animation=\"grow\" />\n                        }\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={modalClose}>Close</Button>\n            </Modal.Footer>\n\n\n        </Modal>\n    );\n}\n\nexport default Register"],"sourceRoot":""}