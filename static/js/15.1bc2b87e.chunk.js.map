{"version":3,"sources":["components/helpers/playlist/index.js","images/image_not_found.png","../node_modules/core-js/modules/esnext.promise.all-settled.js","../node_modules/core-js/modules/es.promise.all-settled.js","components/pages/profile/reducer.js","components/pages/profile/index.js"],"names":["Playlist","playlist","handleRedirect","handleRemove","isProfile","dispatchPrivacyUpdate","colWidth","useState","style","setStyle","useEffect","film_id","className","onClick","id","image","img","width","margin","display","justifyContent","alignItems","icon","line","text","title","isPublic","is_public","author_name","require","$","aFunction","newPromiseCapabilityModule","perform","iterate","target","stat","allSettled","iterable","C","this","capability","f","resolve","reject","result","promiseResolve","values","counter","remaining","promise","index","alreadyCalled","push","undefined","call","then","value","status","error","reason","initialProfileState","data","isLoading","isAllFetched","isRemoving","toRemove","filmsCount","playlistsCount","profileReducer","state","action","type","fieldName","payload","isInitialLoaded","pageMaxFetchCount","Set","filter","resource","map","isPlaylist","Profile","useContext","UserContext","user","clearUser","RemoveModalContext","showModal","clear","removeModalData","history","useHistory","useReducer","dispatch","handleProfileOnBottom","useCallback","useBottomScrollListener","triggerOnNoScroll","auth","replace","process","a","Promise","userApi","skipFilms","skipPlaylists","limit","pageInitialMaxFetchCount","response","films","playlists","film","image_not_found","length","fetchInitialData","fetchData","playlistApi","filmApi","console","remove","e","stopPropagation","record","pathname","search","handleRedirectPlaylist","Array","_"],"mappings":"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","file":"static/js/15.1bc2b87e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport TextTruncate from \"react-text-truncate\";\nimport BlurredImageComponent from \"../blurredImage\";\nimport RemoveButton from '../../helpers/removeButton';\nimport ChangePrivacyButton from '../changePrivacyButton';\n\nconst Playlist = ({ playlist, handleRedirect, handleRemove, isProfile, dispatchPrivacyUpdate }) => {\n\n    const colWidth = isProfile ? 8 : 10\n\n    const [style, setStyle] = useState(\"mb-4 play-outer-container remove-container\")\n\n    useEffect(() => {\n        if (!playlist.film_id) setStyle(\"mb-4 play-cursor-default remove-container\")\n    }, [playlist.film_id])\n\n\n    return (\n        <div className=\"col-12 col-sm-6 col-md-3 col-lg-2 container-px\"\n            key={playlist.id}>\n            <div className={`col ${style} p-0`} onClick={() => handleRedirect(playlist.id, playlist.film_id)}>\n                <div className=\"play-container p-0\">\n                    <BlurredImageComponent\n                        image={playlist.img} />\n\n                    <div style={{ width: '100%', margin: 0 }} className=\"row play-middle\">\n                        <div className=\"col-5 col-sm-5\" style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n                            <FontAwesomeIcon icon=\"play\" />\n                        </div>\n                        <div className=\"col-7 col-sm-7\" style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>\n                            <small className=\"font-weight-bold\" >Play all</small>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row m-0 mt-1\">\n                    <div className={`p-0 col-${colWidth} col-sm-${colWidth}`}>\n                        <TextTruncate line={1} text={playlist.title}\n                            className=\"mb-1 mt-1 title \" />\n                    </div>\n\n\n                    {\n                        isProfile && <div className=\"col-4 col-sm-4 p-0 d-flex justify-content-end\">\n                            <ChangePrivacyButton\n                                id={playlist.id}\n                                isPublic={playlist.is_public}\n                                isProfile={true}\n                                dispatchPrivacyUpdate={dispatchPrivacyUpdate} />\n                            <RemoveButton handleRemove={handleRemove} />\n                        </div>\n                    }\n                </div>\n                <p className=\"mb-0 author-nick\">\n                    <span>{playlist.author_name}</span>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default Playlist","export default __webpack_public_path__ + \"static/media/image_not_found.c4ba1e76.png\";","// TODO: Remove from `core-js@4`\nrequire('./es.promise.all-settled.js');\n","'use strict';\nvar $ = require('../internals/export');\nvar aFunction = require('../internals/a-function');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aFunction(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        promiseResolve.call(C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","import { pageMaxFetchCount } from \"../../../config\"\n\nexport const initialProfileState = {\n    data: null,\n    isLoading: false,\n    isAllFetched: false,\n    isRemoving: false,\n    toRemove: null,\n    error: null,\n    filmsCount: 0,\n    playlistsCount: 0,\n}\n\nexport function profileReducer(state, action) {\n    switch (action.type) {\n        case 'field': {\n            return {\n                ...state,\n                [action.fieldName]: action.payload\n            }\n        }\n        case 'initial-success': {\n            return {\n                ...state,\n                isLoading: false,\n                isInitialLoaded: true,\n                isAllFetched: action.filmsCount < pageMaxFetchCount && action.playlistsCount < pageMaxFetchCount,\n                filmsCount: state.filmsCount + action.filmsCount,\n                playlistsCount: state.playlistsCount + action.playlistsCount,\n                data: [...new Set(action.data)]\n            }\n        }\n        case 'load': {\n            return !state.isLoading && !state.isAllFetched && state.isInitialLoaded && !state.error ?\n                { ...state, isLoading: true, isAllFetched: false } :\n                state\n        }\n        case 'success': {\n            return {\n                ...state,\n                isLoading: false,\n                isAllFetched: action.filmsCount < pageMaxFetchCount && action.playlistsCount < pageMaxFetchCount,\n                filmsCount: state.filmsCount + action.filmsCount,\n                playlistsCount: state.playlistsCount + action.playlistsCount,\n                data: [...new Set([...state.data, ...action.data])]\n            }\n        }\n        case 'remove': {\n            return {\n                ...state,\n                toRemove: action.payload,\n                isRemoving: true\n            }\n        }\n        case 'remove-success': {\n            return {\n                ...state,\n                isRemoving: false,\n                toRemove: null,\n                data: state.toRemove ? state.data.filter(resource => resource.id !== state.toRemove.id) : state.data\n            }\n        }\n        case 'change-playlist-privacy-success': {\n            return {\n                ...state,\n                data: state.data.map(data => {\n                    if (data.isPlaylist && data.id === action.payload.id) return { ...data, is_public: action.payload.is_public }\n                    return data\n                })\n            }\n        }\n        case 'clear': {\n            return initialProfileState\n        }\n        default: return state\n    }\n}","import React, { useEffect, useReducer, useCallback, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { initialProfileState, profileReducer } from './reducer';\n\nimport Film from '../../helpers/film';\nimport Playlist from '../../helpers/playlist';\n\nimport * as userApi from '../../../services/userService'\nimport * as playlistApi from '../../../services/playlistService'\nimport * as filmApi from '../../../services/filmService'\n\nimport { pageInitialMaxFetchCount, pageMaxFetchCount } from '../../../config';\n\nimport UserContext from '../../../helpers/contexts/user/userContext';\nimport RemoveModalContext from '../../../helpers/contexts/removeModal/removeModalContext';\nimport useBottomScrollListener from '../../../helpers/hooks/useBottomScrollListener';\n\nimport image_not_found from '../../../images/image_not_found.png'; // Tell Webpack this JS file uses this image\nimport Skeleton from '../../helpers/film/skeleton'\nimport 'core-js/modules/esnext.promise.all-settled'\n\nconst Profile = () => {\n\n    const { user, clearUser } = useContext(UserContext)\n\n    const { showModal, clear, removeModalData } = useContext(RemoveModalContext)\n\n    let history = useHistory()\n\n    const [state, dispatch] = useReducer(profileReducer, initialProfileState)\n    const { data, isLoading, isAllFetched, isInitialLoaded, error, isRemoving, toRemove, filmsCount, playlistsCount } = state\n\n    const handleProfileOnBottom = useCallback(() => {\n        if (!isLoading && !isAllFetched && isInitialLoaded && !error) {\n            dispatch({\n                type: 'load'\n            })\n        }\n    }, [isLoading, isAllFetched, isInitialLoaded, error])\n\n    useBottomScrollListener(handleProfileOnBottom, { triggerOnNoScroll: true })\n\n    useEffect(() => {\n        if (!user.auth && user.isInitialLoaded) {\n            history.replace(`${process.env.REACT_APP_PATH_NAME}`)\n            history.push(`${process.env.REACT_APP_PATH_NAME}login`)\n            clearUser()\n        }\n    }, [user, history, clearUser])\n\n    useEffect(() => {\n        async function fetchInitialData() {\n\n            const [response] = await Promise.allSettled([\n                userApi.me({ skipFilms: 0, skipPlaylists: 0, limit: pageInitialMaxFetchCount })\n            ])\n\n            let data = []\n\n            let films = []\n            let playlists = []\n\n            if (response.status === \"fulfilled\") {\n                films = response.value.data.films.map(film => {\n                    return {\n                        ...film,\n                        img: `${process.env.REACT_APP_API_URL}films/${film.id}/thumbnail`,\n\n                    }\n                })\n\n                playlists = response.value.data.playlists.map(playlist => {\n                    const image = playlist.film_id ?\n                        `${process.env.REACT_APP_API_URL}films/${playlist.film_id}/thumbnail` :\n                        image_not_found\n                    return {\n                        ...playlist,\n                        img: image,\n                        isPlaylist: true\n\n                    }\n                })\n\n                data = [...data, ...films, ...playlists]\n            }\n\n            dispatch({\n                type: 'initial-success',\n                data: data,\n                filmsCount: films.length,\n                playlistsCount: playlists.length,\n            })\n        }\n\n        dispatch({ type: 'clear' })\n        fetchInitialData()\n\n    }, [])\n\n    useEffect(() => {\n        async function fetchData() {\n            const [response] = await Promise.allSettled([\n                userApi.me({ skipFilms: filmsCount, skipPlaylists: playlistsCount, limit: pageMaxFetchCount })\n            ])\n\n            let data = []\n\n            let films = []\n            let playlists = []\n\n            if (response.status === \"fulfilled\") {\n                films = response.value.data.films.map(film => {\n                    return {\n                        ...film,\n                        img: `${process.env.REACT_APP_API_URL}films/${film.id}/thumbnail`,\n\n                    }\n                })\n\n                playlists = response.value.data.playlists.map(playlist => {\n                    const image = playlist.film_id ?\n                        `${process.env.REACT_APP_API_URL}films/${playlist.film_id}/thumbnail` :\n                        image_not_found\n                    return {\n                        ...playlist,\n                        img: image,\n                        isPlaylist: true\n\n                    }\n                })\n\n                data = [...data, ...films, ...playlists]\n            }\n\n            dispatch({\n                type: 'success',\n                data: data,\n                filmsCount: films.length,\n                playlistsCount: playlists.length,\n            })\n        }\n\n        if (isLoading && isInitialLoaded) fetchData()\n    }, [filmsCount, isLoading, playlistsCount, isInitialLoaded])\n\n    useEffect(() => {\n        async function remove() {\n\n            try {\n                if (toRemove.isPlaylist) {\n                    const resPlaylist = await playlistApi.remove(toRemove.id)\n                    if (resPlaylist.status === 204) {\n                        dispatch({\n                            type: 'remove-success'\n                        })\n                        clear()\n                    }\n                } else {\n                    const resFilm = await filmApi.remove(toRemove.id)\n                    if (resFilm.status === 204) {\n                        dispatch({\n                            type: 'remove-success'\n                        })\n                        clear()\n                    }\n                }\n            } catch (err) {\n                console.error(err)\n            }\n        }\n        if (isRemoving && removeModalData.isRemoving && toRemove &&\n            removeModalData.id === toRemove.id && removeModalData.title === toRemove.title &&\n            removeModalData.type === (toRemove.isPlaylist ? 'playlist' : 'film')) remove()\n    }, [isRemoving, removeModalData, toRemove, clear])\n\n    const handleRemove = (e, resource) => {\n        e.stopPropagation()\n        if (removeModalData.isRemoving) return\n        dispatch({\n            type: 'remove',\n            payload: resource\n        })\n        showModal(resource.id, resource.isPlaylist ? 'playlist' : 'film', resource.title)\n    };\n\n    const handleRedirectFilm = (id) => {\n        history.push({ pathname: `${process.env.REACT_APP_PATH_NAME}film/` + id });\n    }\n\n    const handleRedirectPlaylist = (record) => {\n        if (!record.film_id) return\n        history.push({\n            pathname: `${process.env.REACT_APP_PATH_NAME}film/` + record.film_id,\n            search: `?list=${record.id}`\n        });\n    }\n\n    return (\n        <div className=\"row mt-5 mx-2\">\n            {\n                data ? data.map((record, index) => {\n                    if (record.isPlaylist) {\n                        return <Playlist key={record.id}\n                            playlist={record} index={index}\n                            isProfile={true}\n                            dispatchPrivacyUpdate={dispatch}\n                            handleRedirect={() => handleRedirectPlaylist(record)}\n                            handleRemove={(e) => handleRemove(e, record)} />\n                    } else {\n                        return <Film key={record.id} isProfile={true}\n                            film={record} index={index}\n                            handleRedirect={() => handleRedirectFilm(record.id)}\n                            handleRemove={(e) => handleRemove(e, record)} />\n                    }\n                })  : ([...Array(20)].map((_, index) => (\n                        <Skeleton key={index} />\n                    )))\n            }\n\n            {\n                !isAllFetched && <div className=\"fetch-loader d-flex justify-content-center\">\n                    {\n                        (isLoading) &&\n                        <div className=\"spinner-border\" />\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default Profile\n"],"sourceRoot":""}