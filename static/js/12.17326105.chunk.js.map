{"version":3,"sources":["components/playlistsPage/reducer.js","components/playlistsPage/index.js"],"names":["initialState","playlists","playlistsCount","isLoading","isAllFetched","isInitialLoaded","error","playlistsPageReducer","state","action","type","fieldName","payload","Set","responseCount","pageInitialMaxFetchCount","pageMaxFetchCount","PlaylistsPage","props","history","useHistory","useReducer","dispatch","handleOnPlaylistsBottom","useCallback","useBottomScrollListener","triggerOnNoScroll","useEffect","a","playlistApi","limit","then","res","result","data","filtered","filter","playlist","film_id","forEach","img","process","length","catch","err","console","fetchInitialPlaylists","skip","fetchPlaylists","setRedirect","playlistID","filmID","push","pathname","search","Row","className","map","index","handleRedirect","id","style","height","width","Spinner","animation"],"mappings":"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","file":"static/js/12.17326105.chunk.js","sourcesContent":["import { pageInitialMaxFetchCount, pageMaxFetchCount  } from '../../config'\n\n\nexport const initialState = {\n    playlists: null,\n    playlistsCount: 0,\n    isLoading: false,\n    isAllFetched: false,\n    isInitialLoaded: false,\n    error: null,\n}\n\nexport const playlistsPageReducer = (state, action) => {\n    switch (action.type) {\n        case 'field': {\n            return {\n                ...state,\n                [action.fieldName]: action.payload\n            }\n        }\n        case 'initial-success': {\n            return {\n                ...state,\n                playlists: [...new Set([...action.playlists])],\n                isLoading: false,\n                isInitialLoaded: true,\n                isAllFetched: action.responseCount < pageInitialMaxFetchCount,\n                playlistsCount: state.playlistsCount + action.responseCount,\n            }\n        }\n        case 'load': {\n            return {\n                ...state,\n                isLoading: true,\n                isAllFetched: false,\n                error: null\n            }\n        }\n        case 'success': {\n            return {\n                ...state,\n                playlists: [...new Set([...state.playlists, ...action.playlists])],\n                isLoading: false,\n                isAllFetched: action.responseCount < pageMaxFetchCount,\n                playlistsCount: state.playlistsCount + action.responseCount,\n                error: null\n            }\n        }\n        case 'clear': {\n            return initialState\n        }\n        case 'error': {\n            return {\n                ...state,\n                isLoading: false,\n                isAllFetched: false,\n                error: action.payload\n            }\n        }\n        default:\n            return state\n    }\n}\n","import React, { useEffect, useReducer, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Spinner } from 'react-bootstrap';\n\nimport * as playlistApi from '../../services/playlistService'\n\nimport { playlistsPageReducer, initialState } from './reducer'\nimport useBottomScrollListener from '../../helpers/hooks/useBottomScrollListener';\nimport Playlist from '../../helpers/components/playlist';\nimport { pageInitialMaxFetchCount, pageMaxFetchCount } from '../../config';\n\nconst pathName = process.env.REACT_APP_PATH_NAME;\n\nfunction PlaylistsPage(props) {\n\n    let history = useHistory()\n\n    const [state, dispatch] = useReducer(playlistsPageReducer, initialState)\n    const { playlists, isLoading, isAllFetched, isInitialLoaded, playlistsCount } = state\n\n    const handleOnPlaylistsBottom = useCallback(() => {\n        if (!isLoading && !isAllFetched && isInitialLoaded) {\n            dispatch({\n                type: 'load'\n            })\n        }\n    }, [isAllFetched, isLoading, isInitialLoaded])\n\n    useBottomScrollListener(handleOnPlaylistsBottom, { triggerOnNoScroll: true })\n\n    useEffect(() => {\n        async function fetchInitialPlaylists() {\n            await playlistApi.show({ limit: pageInitialMaxFetchCount })\n                .then(res => {\n                    const result = res.data;\n\n                    let filtered = result.filter(playlist => playlist.film_id)\n\n                    filtered.forEach(playlist => {\n                        playlist.img = `${process.env.REACT_APP_API_URL}films/${playlist.film_id}/thumbnail?width=small_webp`\n                    });\n\n                    dispatch({\n                        type: 'initial-success',\n                        playlists: filtered,\n                        responseCount: result.length\n                    })\n\n                })\n                .catch(err => {\n                    console.error(err)\n                })\n        }\n\n        dispatch({ type: 'clear' })\n        fetchInitialPlaylists()\n\n    }, [])\n\n    useEffect(() => {\n        async function fetchPlaylists() {\n            await playlistApi.show({ skip: playlistsCount, limit: pageMaxFetchCount })\n                .then(res => {\n                    const result = res.data;\n\n                    let filtered = result.filter(playlist => playlist.film_id)\n\n                    filtered.forEach(playlist => {\n                        playlist.img = `${process.env.REACT_APP_API_URL}films/${playlist.film_id}/thumbnail?width=small_webp`\n                    });\n\n                    dispatch({\n                        type: 'success',\n                        playlists: filtered,\n                        responseCount: result.length\n                    })\n\n                })\n                .catch(err => {\n                    console.error(err)\n                })\n        }\n\n        if (isLoading && isInitialLoaded) fetchPlaylists()\n\n    }, [isLoading, isInitialLoaded, playlists, playlistsCount])\n\n\n    const setRedirect = (playlistID, filmID) => {\n        history.push({\n            pathname: `${pathName}film/` + filmID,\n            search: `?list=${playlistID}`\n        });\n    };\n\n\n    return (\n        <Row className=\"mt-5 mx-2\">\n            {\n                playlists && playlists.map((playlist, index) => <Playlist key={playlist.id} playlist={playlist} index={index} handleRedirect={setRedirect} />)\n            }\n            {\n                !isAllFetched && <div style={{ height: 32 + 'px', width: '100%' }} className=\"d-flex justify-content-center\">\n                    {(isLoading || !isInitialLoaded) && <Spinner animation=\"border\" />}\n                </div>\n            }\n\n        </Row>\n\n    )\n}\n\nexport default PlaylistsPage\n"],"sourceRoot":""}